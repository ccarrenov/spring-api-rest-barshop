/* BLOQUE ANONIMO PARA ELIMINAR LOS OBJETOS DE UNA ESQUEMA */
/* FILTRADO POR:  SEQUENCE, TABLE, PACKAGE, PROCEDURE, FUNCTION, TRIGGER*/
SET SERVEROUTPUT ON
DECLARE
    CURSOR CUR_OBJ_SCHEME (OWNER_VAR VARCHAR) IS
        SELECT OBJ.OWNER, OBJ.OBJECT_NAME, OBJ.OBJECT_TYPE
        FROM ALL_OBJECTS OBJ
        WHERE UPPER(OBJ.OWNER) = UPPER(OWNER_VAR) AND
        OBJ.OBJECT_TYPE IN ('SEQUENCE', 'TABLE', 'PACKAGE', 
                            'PROCEDURE', 'FUNCTION', 'TRIGGER',
                            'VIEW')
        ORDER BY OBJ.OBJECT_TYPE DESC;

    CURSOR CONTRAINTS_TABLE(OWNER_VAR VARCHAR, TABLE_NAME_VAR VARCHAR) IS
        SELECT TABLE_NAME, CONSTRAINT_NAME
        FROM ALL_CONSTRAINTS
        WHERE UPPER(OWNER) = UPPER(OWNER_VAR)
        AND TABLE_NAME = TABLE_NAME_VAR
        AND CONSTRAINT_TYPE = 'R';

STATEMENT_VAR               VARCHAR(250);
DROP_CONSTRAINT_VAR         VARCHAR(250);
CASCADE_CONSTRAINT_VAR      VARCHAR(250);
OWNER_NAME                  VARCHAR(250);
COUNT_SEQUENCE_VAR          NUMBER:=0;
COUNT_TABLE_VAR             NUMBER:=0;
COUNT_PACKAGE_VAR           NUMBER:=0;
COUNT_PROCEDURE_VAR         NUMBER:=0;
COUNT_FUNCTION_VAR          NUMBER:=0;
COUNT_TRIGGER_VAR           NUMBER:=0;
COUNT_VIEW_VAR              NUMBER:=0;
BEGIN

    OWNER_NAME := 'APRENDIENDO_PL';
    
    FOR FILA_VAR IN CUR_OBJ_SCHEME(OWNER_NAME)
    LOOP
        CASCADE_CONSTRAINT_VAR := '';
        IF FILA_VAR.OBJECT_TYPE = 'TABLE' THEN
            COUNT_TABLE_VAR := COUNT_TABLE_VAR + 1;
            FOR FILA_CONSTRAINT_VAR IN CONTRAINTS_TABLE(OWNER_NAME, FILA_VAR.OBJECT_NAME)
            LOOP
            
                DROP_CONSTRAINT_VAR := 'ALTER TABLE ' || 
                                        FILA_VAR.OWNER ||'.'|| FILA_VAR.OBJECT_NAME || 
                                    ' DROP CONSTRAINT "' ||  FILA_CONSTRAINT_VAR.CONSTRAINT_NAME
                                    ||'"';
            
                DBMS_OUTPUT.PUT_LINE('CONSTRAINT STATEMENT: ' || DROP_CONSTRAINT_VAR);
            
                EXECUTE IMMEDIATE DROP_CONSTRAINT_VAR;   
            
                
            END LOOP;
            
            CASCADE_CONSTRAINT_VAR := ' CASCADE CONSTRAINTS';
            
        ELSIF FILA_VAR.OBJECT_TYPE = 'SEQUENCE' THEN
            COUNT_SEQUENCE_VAR := COUNT_SEQUENCE_VAR + 1;
        ELSIF FILA_VAR.OBJECT_TYPE = 'PACKAGE' THEN
            COUNT_PACKAGE_VAR := COUNT_PACKAGE_VAR + 1;
        ELSIF FILA_VAR.OBJECT_TYPE = 'PROCEDURE' THEN
            COUNT_PROCEDURE_VAR := COUNT_PROCEDURE_VAR + 1;
        ELSIF FILA_VAR.OBJECT_TYPE = 'FUNCTION' THEN
            COUNT_FUNCTION_VAR := COUNT_FUNCTION_VAR + 1;
        ELSIF FILA_VAR.OBJECT_TYPE = 'TRIGGER' THEN
            COUNT_TRIGGER_VAR := COUNT_TRIGGER_VAR + 1;
        ELSIF FILA_VAR.OBJECT_TYPE = 'VIEW' THEN
            COUNT_VIEW_VAR := COUNT_VIEW_VAR + 1;            
        END IF;
                    
        STATEMENT_VAR := 'DROP ' || FILA_VAR.OBJECT_TYPE || ' ' || FILA_VAR.OWNER 
                            ||'.'|| FILA_VAR.OBJECT_NAME || CASCADE_CONSTRAINT_VAR;
        DBMS_OUTPUT.PUT_LINE('STATEMENT: ' || STATEMENT_VAR);

        EXECUTE IMMEDIATE STATEMENT_VAR;
        
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('DROP TABLE: '|| COUNT_TABLE_VAR);
    DBMS_OUTPUT.PUT_LINE('DROP SEQUENCE: '|| COUNT_SEQUENCE_VAR);
    DBMS_OUTPUT.PUT_LINE('DROP PACKAGE: '|| COUNT_PACKAGE_VAR);
    DBMS_OUTPUT.PUT_LINE('DROP PROCEDURE: '|| COUNT_PROCEDURE_VAR);
    DBMS_OUTPUT.PUT_LINE('DROP FUNCTION: '|| COUNT_FUNCTION_VAR);
    DBMS_OUTPUT.PUT_LINE('DROP TRIGGER: '|| COUNT_TRIGGER_VAR);
    DBMS_OUTPUT.PUT_LINE('DROP VIEW: '|| COUNT_VIEW_VAR);
    
EXCEPTION 
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE('CODE: '|| SQLCODE);
    DBMS_OUTPUT.PUT_LINE('DETAIL ERROR: '|| SQLERRM);    
END;

